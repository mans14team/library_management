# 패키지 및 기본 설정
packages:
  yum:
    curl: []
    jq: []

commands:
  00_docker_setup:
    command: |
      # Docker 그룹 생성 및 사용자 추가
      if ! getent group docker > /dev/null; then
        groupadd docker
      fi
      usermod -a -G docker ec2-user
      chmod 666 /var/run/docker.sock
      chown root:docker /var/run/docker.sock

      # Docker 서비스 설정
      systemctl enable docker
      systemctl restart docker

      # 권한 적용을 위한 세션 갱신
      newgrp docker || true

  01_install_docker_compose:
    command: |
      curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose

  02_verify_docker:
    command: |
      # Docker 권한 확인
      docker ps || true
      docker info || true
    ignoreErrors: true

container_commands:
  01_docker_cleanup:
    command: |
      echo "Starting Docker cleanup..."

      # 중지된 컨테이너만 제거
      docker container prune -f

      # 사용하지 않는 이미지만 제거
      docker image prune -f

      # 현재 실행 중인 컨테이너 확인
      echo "Currently running containers:"
      docker ps
    ignoreErrors: true

  02_make_log_dir:
    command: |
      echo "Setting up log directory..."
      mkdir -p /var/log/eb-docker/containers/app
      chmod -R 777 /var/log/eb-docker/containers/app
      echo "Log directory setup complete"
    ignoreErrors: true

  03_verify_docker:
    command: |
      echo "Verifying Docker setup..."

      # Docker 서비스 상태 확인
      if ! systemctl status docker > /dev/null; then
        echo "Docker service is not running"
        systemctl restart docker
        sleep 5
      fi

      # Docker 실행 권한 확인
      if ! docker ps > /dev/null; then
        echo "Unable to run Docker commands"
        exit 1
      fi

      echo "Docker verification complete"
      docker info

# Nginx 설정
files:
  "/etc/nginx/conf.d/default.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;
        server_name _;

        # 타임아웃 설정
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;

        # gzip 설정 추가
        gzip on;
        gzip_comp_level 4;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # ELB 헬스체크
        location = / {
          access_log off;
          add_header Content-Type text/plain;
          return 200 'healthy\n';
        }

        location /actuator/health {
            proxy_pass http://127.0.0.1:8080/actuator/health;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 캐시 설정 추가
            proxy_buffering off;
            proxy_cache off;
        }

        location / {
          proxy_pass http://127.0.0.1:8080;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_connect_timeout 300;
          proxy_send_timeout 300;
          proxy_read_timeout 300;
          send_timeout 300;

          # 버퍼 설정
          proxy_buffer_size 128k;
          proxy_buffers 4 256k;
          proxy_busy_buffers_size 256k;

          # 보안 헤더
          add_header X-Content-Type-Options nosniff;
          add_header X-Frame-Options SAMEORIGIN;
          add_header X-XSS-Protection "1; mode=block";
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
          add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
        }
      }

option_settings:
  # 애플리케이션 헬스체크
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /actuator/health

  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /actuator/health
    HealthCheckInterval: 10
    HealthCheckTimeout: 5
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 5
    Port: 8080
    Protocol: HTTP
    StickinessEnabled: true
    StickinessLBCookieDuration: 86400
    MatcherHTTPCode: "200"

  # 타임아웃 설정
  aws:elbv2:loadbalancer:
    IdleTimeout: 300

  # 로깅 설정
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 7

  aws:elasticbeanstalk:xray:
    XRayEnabled: true

  # VPC 및 보안 그룹 설정
  aws:ec2:vpc:
    VPCId: vpc-0ac28fbc07da1b7bf
    Subnets: subnet-0e5701ac0377b957a5,subnet-06ee3412a533e3733,subnet-0b5b563d6cbabea78,subnet-0e309f7377e068862
    ELBSubnets: subnet-0e5701ac0377b957a5,subnet-06ee3412a533e3733,subnet-0b5b563d6cbabea78,subnet-0e309f7377e068862
    AssociatePublicIpAddress: true

  aws:autoscaling:launchconfiguration:
    SecurityGroups: sg-029435f2b5c4fa5af
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    InstanceType: t3.small

  # 오토스케일링 설정
  aws:autoscaling:asg:
    MinSize: 1
    MaxSize: 4

  aws:autoscaling:trigger:
    BreachDuration: 5
    LowerThreshold: 20
    UpperThreshold: 80
    MeasureName: CPUUtilization
    Unit: Percent

  aws:autoscaling:updatepolicy:rollingupdate:
    RollingUpdateEnabled: true
    RollingUpdateType: Health
    MaxBatchSize: 1
    MinInstancesInService: 1
    PauseTime: PT2M

  # 서비스 롤 설정 추가
  aws:elasticbeanstalk:environment:
    ServiceRole: aws-elasticbeanstalk-service-role
    LoadBalancerType: application

  # 데이터베이스 보안 그룹 환경 변수 추가
  aws:elasticbeanstalk:application:environment:
    DB_SECURITY_GROUP: sg-0ce5668846c7b5d9a
    JAVA_TOOL_OPTIONS: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    SERVER_PORT: 8080