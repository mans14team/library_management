# 패키지 및 기본 설정
packages:
  yum:
    curl: []
    jq: []

commands:
  01_install_docker_compose:
    command: |
      curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose

# Nginx 설정
files:
  "/etc/nginx/conf.d/default.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;
        server_name _;

        # 타임아웃 설정
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;

        # ELB 헬스체크
        location = / {
          access_log off;
          add_header Content-Type text/plain;
          return 200 'healthy\n';
        }

        location /actuator/health {
            proxy_pass http://127.0.0.1:8080/actuator/health;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
          proxy_pass http://localhost:8080;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_connect_timeout 300;
          proxy_send_timeout 300;
          proxy_read_timeout 300;
          send_timeout 300;

          # 보안 헤더
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-XSS-Protection "1; mode=block";
          add_header X-Content-Type-Options "nosniff";
        }
      }

option_settings:
  # 컨테이너 설정
  aws:elasticbeanstalk:container:docker:
    Memory: 1024
    MemoryReservation: 512
    LogsType: json-file
    LogsJsonFile: true
    LogsRotateSize: 10M
    LogsRotateTime: 86400

  # 애플리케이션 헬스체크
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /actuator/health

  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /actuator/health
    HealthCheckInterval: 15
    HealthCheckTimeout: 5
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 5
    Port: 80
    Protocol: HTTP
    StickinessEnabled: true
    StickinessLBCookieDuration: 86400
    MatcherHTTPCode: "200"

  # 타임아웃 설정
  aws:elbv2:loadbalancer:
    IdleTimeout: 300

  # 로깅 설정
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 7

  aws:elasticbeanstalk:xray:
    XRayEnabled: true

  # VPC 및 보안 그룹 설정
  aws:ec2:vpc:
    VPCId: vpc-0ac28fbc07da1b7bf
    Subnets: subnet-0e5701ac0377b957a5,subnet-06ee3412a533e3733,subnet-0b5b563d6cbabea78,subnet-0e309f7377e068862
    ELBSubnets: subnet-0e5701ac0377b957a5,subnet-06ee3412a533e3733,subnet-0b5b563d6cbabea78,subnet-0e309f7377e068862
    AssociatePublicIpAddress: true

  aws:autoscaling:launchconfiguration:
    SecurityGroups: sg-029435f2b5c4fa5af
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    InstanceType: t3.small

  # 오토스케일링 설정
  aws:autoscaling:asg:
    MinSize: 1
    MaxSize: 4
    Cooldown: 300

  aws:autoscaling:trigger:
    BreachDuration: 5
    LowerThreshold: 20
    UpperThreshold: 80
    MeasureName: CPUUtilization
    Unit: Percent

  aws:autoscaling:updatepolicy:rollingupdate:
    RollingUpdateEnabled: true
    RollingUpdateType: Health
    MaxBatchSize: 1
    MinInstancesInService: 1
    PauseTime: PT5M

  # 서비스 롤 설정 추가
  aws:elasticbeanstalk:environment:
    ServiceRole: aws-elasticbeanstalk-service-role
    LoadBalancerType: application
    ProxyServer: nginx

  # 데이터베이스 보안 그룹 환경 변수 추가
  aws:elasticbeanstalk:application:environment:
    DB_SECURITY_GROUP: sg-0ce5668846c7b5d9a
    JAVA_TOOL_OPTIONS: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    SERVER_PORT: 8080
    DB_HOST: ${DB_HOST}
    DB_USERNAME: ${DB_USERNAME}
    DB_PASSWORD: ${DB_PASSWORD}
    REDIS_SENTINEL_NODES: ${REDIS_SENTINEL_NODES}
    REDIS_PASSWORD: ${REDIS_PASSWORD}
    JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    OWNER_TOKEN: ${OWNER_TOKEN}
    TOSS_SECRET_KEY: ${TOSS_SECRET_KEY}
    TOSS_CLIENT_KEY: ${TOSS_CLIENT_KEY}
    TOSS_SUCCESS_URL: ${TOSS_SUCCESS_URL}
    TOSS_FAIL_URL: ${TOSS_FAIL_URL}
    TOSS_BASE_URL: ${TOSS_BASE_URL}

  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: nginx

  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static

  aws:elasticbeanstalk:docker:daemon:
    Logging: true

  # Target Group 설정
  aws:elbv2:targetgroup:
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 5
    HealthCheckIntervalSeconds: 15
    HealthCheckTimeoutSeconds: 5
    HealthCheckPath: /actuator/health
    Protocol: HTTP
    Port: 80