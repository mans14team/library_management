files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/02_docker_login.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Docker 로그인 설정
      echo "Configuring Docker login..."
      mkdir -p /home/ec2-user/.docker

      # Docker 설정 파일 생성
      echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$(echo -n "${DOCKER_USERNAME}:${DOCKER_PASSWORD}" | base64)'"}}}' > /home/ec2-user/.docker/config.json
      chmod 600 /home/ec2-user/.docker/config.json

      # Docker 로그인 시도
      echo "Attempting Docker login..."
      docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} || exit 1

      echo "Docker login successful"

container_commands:
  01_prepare_container:
    command: |
      #!/bin/bash
      set -e
      echo "Starting container preparation..."

      # 환경 변수 확인
      if [ -z "$DOCKER_USERNAME" ] || [ -z "$IMAGE_TAG" ]; then
        echo "Required environment variables are missing"
        echo "DOCKER_USERNAME: $DOCKER_USERNAME"
        echo "IMAGE_TAG: $IMAGE_TAG"
        exit 1
      fi

      # 환경 변수 출력 (디버깅용)
      echo "DOCKER_USERNAME: ${DOCKER_USERNAME}"
      echo "IMAGE_TAG: ${IMAGE_TAG}"

      # 기존 컨테이너 정리
      echo "Cleaning up existing containers..."
      docker ps -aq | xargs -r docker stop
      docker ps -aq | xargs -r docker rm

      # 이미지 풀
      if ! docker pull ${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}; then
        echo "Failed to pull image"
        exit 1
      fi

      # 이미지 태그
      if ! docker tag ${DOCKER_USERNAME}/spring-app:${IMAGE_TAG} aws_beanstalk/current-app:latest; then
        echo "Failed to tag image"
        exit 1
      fi

      echo "Successfully prepared container"
    leader_only: true

  02_verify_image:
    command: |
      #!/bin/bash
      echo "Verifying docker images..."
      docker images
      if ! docker images | grep -q "aws_beanstalk/current-app"; then
        echo "Current app image not found!"
        exit 1
      fi
      echo "Image verification successful"