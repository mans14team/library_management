files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/02_docker_login.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e

      echo "Starting Docker authentication setup..."

      # 환경 변수 검증
      if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
        echo "ERROR: Docker credentials are not properly set"
        echo "DOCKER_USERNAME: ${DOCKER_USERNAME:-not set}"
        echo "DOCKER_PASSWORD: ${DOCKER_PASSWORD:-not set}"
        exit 1
      fi

      # Docker 설정 디렉토리 생성
      echo "Creating Docker config directory..."
      mkdir -p /home/ec2-user/.docker

      # Docker 인증 파일 생성
      echo "Generating Docker auth configuration..."
      AUTH_TOKEN=$(echo -n "${DOCKER_USERNAME}:${DOCKER_PASSWORD}" | base64)
      cat > /home/ec2-user/.docker/config.json << EOF
      {
        "auths": {
          "https://index.docker.io/v1/": {
            "auth": "${AUTH_TOKEN}"
          }
        }
      }
      EOF

      # 권한 설정
      chmod 600 /home/ec2-user/.docker/config.json
      chown -R ec2-user:ec2-user /home/ec2-user/.docker

      # Docker 로그인 테스트
      echo "Testing Docker login..."
      if ! docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"; then
        echo "ERROR: Docker login failed"
        exit 1
      fi

      echo "Docker authentication setup completed successfully"

container_commands:
  01_prepare_container:
    command: |
      #!/bin/bash
      set -e
      echo "Starting container preparation..."

      # 환경 변수 및 Docker 상태 확인
      if [ -z "$DOCKER_USERNAME" ] || [ -z "$IMAGE_TAG" ]; then
        echo "ERROR: Required environment variables are missing"
        echo "DOCKER_USERNAME: ${DOCKER_USERNAME:-not set}"
        echo "IMAGE_TAG: ${IMAGE_TAG:-not set}"
        exit 1
      fi

      # 이미지 정보 출력
      echo "Container configuration:"
      echo "- Image: ${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}"
      echo "- Docker Username: ${DOCKER_USERNAME}"

      # 이미지 풀링
      echo "Pulling Docker image..."
      if ! docker pull "${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}"; then
        echo "ERROR: Failed to pull image ${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}"
        docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" || true
        echo "Current Docker images:"
        docker images
        exit 1
      fi

      # 이미지 태깅
      echo "Tagging Docker image..."
      if ! docker tag "${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}" "${DOCKER_USERNAME}/spring-app:latest"; then
        echo "ERROR: Failed to tag image"
        exit 1
      fi

      echo "Container preparation completed successfully"
    leader_only: true
#
#  02_verify_image:
#    command: |
#      #!/bin/bash
#      set -e
#      echo "Verifying deployment setup..."
#
#      # Docker 이미지 확인
#      echo "Checking Docker images..."
#      if ! docker images | grep -q "${DOCKER_USERNAME}/spring-app"; then
#        echo "ERROR: Required Docker image not found"
#        docker images
#        exit 1
#      fi
#
#      # Docker 컨테이너 상태 확인
#      echo "Checking Docker containers..."
#      docker ps -a
#
#      # Docker 로그인 상태 확인
#      echo "Verifying Docker login status..."
#      if ! docker info | grep "Username"; then
#        echo "WARNING: Not logged into Docker Hub"
#      fi
#
#      echo "Verification completed successfully"
#    leader_only: true