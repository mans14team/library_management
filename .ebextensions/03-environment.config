files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/03_set_env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e

      echo "Loading environment variables from .env file..."

      # .env 파일이 존재하는지 확인하고 로드
      if [ -f "/var/app/staging/.env" ]; then
        export $(cat "/var/app/staging/.env" | xargs)  # .env 파일 내용을 환경 변수로 설정
        echo "Environment variables loaded from .env file"
      else
        echo "ERROR: .env file not found at $ENV_FILE"
        exit 1
      fi

      echo "Setting up environment variables..."

      # 환경 변수 파일 경로
      ENV_FILE="/opt/elasticbeanstalk/deployment/env.list"

      echo "Creating environment file..."
      cat > "/opt/elasticbeanstalk/deployment/env.list" << EOL
      SPRING_PROFILES_ACTIVE=prod
      SERVER_PORT=8080
      JAVA_TOOL_OPTIONS=-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      REDIS_PASSWORD=${REDIS_PASSWORD}
      REDIS_HOST=${REDIS_HOST}
      DB_HOST=${DB_HOST}
      DB_USERNAME=${DB_USERNAME}
      DB_PASSWORD=${DB_PASSWORD}
      JWT_SECRET_KEY=${JWT_SECRET_KEY}
      OWNER_TOKEN=${OWNER_TOKEN}
      TOSS_SECRET_KEY=${TOSS_SECRET_KEY}
      TOSS_CLIENT_KEY=${TOSS_CLIENT_KEY}
      TOSS_SUCCESS_URL=${TOSS_SUCCESS_URL}
      TOSS_FAIL_URL=${TOSS_FAIL_URL}
      TOSS_BASE_URL=${TOSS_BASE_URL}
      EOL

      chmod 600 "/opt/elasticbeanstalk/deployment/env.list"
      echo "Environment file created successfully at /opt/elasticbeanstalk/deployment/env.list"

container_commands:
  1_docker_start:
    command: |
      #!/bin/bash
      set -e
      echo "Starting application container..."

      echo "Loading environment variables from .env file..."

      # .env 파일이 존재하는지 확인하고 로드
      if [ -f "/var/app/staging/.env" ]; then
        export $(cat "/var/app/staging/.env" | xargs)  # .env 파일 내용을 환경 변수로 설정
        echo "Environment variables loaded from .env file"
      else
        echo "ERROR: .env file not found at $ENV_FILE"
        exit 1
      fi

      # Stopping all running containers
      echo "Stopping all running containers..."
      docker ps -q | xargs -r docker stop
      docker ps -aq | xargs -r docker rm

      # ECR 로그인
      aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      # Dockerrun.aws.json에서 이미지 이름 가져오기
      IMAGE_NAME=$(cat /var/app/staging/Dockerrun.aws.json | jq -r '.Image.Name')
      echo "Using image: ${IMAGE_NAME}"

      # Docker 이미지 pull
      echo "Pulling Docker image..."
      if ! docker pull "${IMAGE_NAME}"; then
        echo "Failed to pull Docker image"
        echo "Debug information:"
        docker info
        aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin "${ECR_REGISTRY}" || echo "ECR login failed"
        exit 1
      fi

      # 컨테이너 시작
      docker run -d \
        --name spring-app \
        -p 8080:8080 \
        -v /var/log/eb-docker/containers/app:/app/logs \
        --env-file /opt/elasticbeanstalk/deployment/env.list \
        --restart unless-stopped \
        "${IMAGE_NAME}"

      # 애플리케이션 상태 확인
      echo "Waiting for container to start..."
      for i in {1..30}; do
        if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
          echo "Application started successfully"
          exit 0
        fi
        echo "Waiting... ($i/30)"
        sleep 2
      done

      # 실패 시 추가 디버그 정보
      echo "Failed to start application"
      docker logs spring-app
      docker images
      aws ecr describe-repositories || echo "Unable to list ECR repositories"
      exit 1
