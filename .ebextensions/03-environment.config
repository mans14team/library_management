option_settings:
  aws:elasticbeanstalk:application:environment:
    DOCKER_USERNAME: "${DOCKER_USERNAME}"
    DOCKER_PASSWORD: "${DOCKER_PASSWORD}"
    IMAGE_TAG: "${IMAGE_TAG}"
    REDIS_PASSWORD: "${REDIS_PASSWORD}"
    REDIS_HOST: "${REDIS_HOST}"
    DB_HOST: "${DB_HOST}"
    DB_USERNAME: "${DB_USERNAME}"
    DB_PASSWORD: "${DB_PASSWORD}"
    JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
    OWNER_TOKEN: "${OWNER_TOKEN}"
    TOSS_SECRET_KEY: "${TOSS_SECRET_KEY}"
    TOSS_CLIENT_KEY: "${TOSS_CLIENT_KEY}"
    TOSS_SUCCESS_URL: "${TOSS_SUCCESS_URL}"
    TOSS_FAIL_URL: "${TOSS_FAIL_URL}"
    TOSS_BASE_URL: "${TOSS_BASE_URL}"
    SPRING_PROFILES_ACTIVE: "prod"

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/03_set_env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e

      echo "Setting up environment variables..."

      # 환경 변수 파일 경로
      ENV_FILE="/opt/elasticbeanstalk/deployment/env.list"

      echo "Creating environment file..."
      cat > "$ENV_FILE" << EOL
      SPRING_PROFILES_ACTIVE=prod
      SERVER_PORT=8080
      JAVA_TOOL_OPTIONS=-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      REDIS_PASSWORD=${REDIS_PASSWORD}
      REDIS_HOST=${REDIS_HOST}
      DB_HOST=${DB_HOST}
      DB_USERNAME=${DB_USERNAME}
      DB_PASSWORD=${DB_PASSWORD}
      JWT_SECRET_KEY=${JWT_SECRET_KEY}
      OWNER_TOKEN=${OWNER_TOKEN}
      TOSS_SECRET_KEY=${TOSS_SECRET_KEY}
      TOSS_CLIENT_KEY=${TOSS_CLIENT_KEY}
      TOSS_SUCCESS_URL=${TOSS_SUCCESS_URL}
      TOSS_FAIL_URL=${TOSS_FAIL_URL}
      TOSS_BASE_URL=${TOSS_BASE_URL}
      EOL

      chmod 600 "$ENV_FILE"
      echo "Environment file created successfully at $ENV_FILE"

container_commands:
  01_verify_env:
    command: |
      #!/bin/bash
      set -e
      echo "Verifying environment settings..."

      # 환경 변수 검증
      required_vars=(
        "DOCKER_USERNAME"
        "REDIS_PASSWORD"
        "REDIS_HOST"
        "DB_HOST"
        "DB_USERNAME"
        "DB_PASSWORD"
        "JWT_SECRET_KEY"
        "SPRING_PROFILES_ACTIVE"
      )

      for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
          echo "ERROR: $var is not set"
          exit 1
        fi
        echo "$var is set"
      done

  02_docker_start:
    command: |
      #!/bin/bash
      set -e
      echo "Starting application container..."

      # Docker login
      echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # Stopping all running containers
      echo "Stopping all running containers..."
      docker ps -q | xargs -r docker stop
      docker ps -aq | xargs -r docker rm

      # 이미지 확인
      if ! docker images | grep -q "${DOCKER_USERNAME}/spring-app"; then
        echo "ERROR: Required Docker image not found"
        docker images
        exit 1
      fi

      # 컨테이너 시작
      docker run -d \
        --name spring-app \
        -p 8080:8080 \
        -v /var/log/eb-docker/containers/app:/app/logs \
        --env-file /opt/elasticbeanstalk/deployment/env.list \
        --restart unless-stopped \
        "${DOCKER_USERNAME}/spring-app:${IMAGE_TAG}"

      # 컨테이너 시작 확인
      echo "Waiting for container to start..."
      for i in {1..30}; do
        echo "Attempt $i/30: Checking container status..."

        if ! docker ps | grep -q spring-app; then
          echo "Container is not running"
          docker logs spring-app
          exit 1
        fi

        if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
          echo "Application started successfully"
          docker ps
          exit 0
        fi

        sleep 10
      done

      echo "Failed to start application"
      docker logs spring-app
      exit 1
