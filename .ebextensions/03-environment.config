option_settings:
  aws:elasticbeanstalk:application:environment:
    DOCKER_USERNAME: "${DOCKER_USERNAME}"
    DOCKER_PASSWORD: "${DOCKER_PASSWORD}"
    IMAGE_TAG: "${IMAGE_TAG}"
    REDIS_PASSWORD: "${REDIS_PASSWORD}"
    REDIS_HOST: "${REDIS_HOST}"
    DB_HOST: "${DB_HOST}"
    DB_USERNAME: "${DB_USERNAME}"
    DB_PASSWORD: "${DB_PASSWORD}"
    JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
    OWNER_TOKEN: "${OWNER_TOKEN}"
    TOSS_SECRET_KEY: "${TOSS_SECRET_KEY}"
    TOSS_CLIENT_KEY: "${TOSS_CLIENT_KEY}"
    TOSS_SUCCESS_URL: "${TOSS_SUCCESS_URL}"
    TOSS_FAIL_URL: "${TOSS_FAIL_URL}"
    TOSS_BASE_URL: "${TOSS_BASE_URL}"
    SPRING_PROFILES_ACTIVE: "prod"

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/03_set_env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e

      echo "Setting up environment variables..."

      # 환경 변수 파일 경로
      ENV_FILE="/opt/elasticbeanstalk/deployment/env"

      # 기존 파일 백업
      if [ -f "$ENV_FILE" ]; then
        echo "Backing up existing environment file..."
        mv "$ENV_FILE" "${ENV_FILE}.bak"
      fi

      # 새 환경 변수 파일 생성
      echo "Creating new environment file..."
      touch "$ENV_FILE"
      chmod 600 "$ENV_FILE"

      # 시스템 환경 변수 설정
      declare -A env_vars=(
        ["SPRING_PROFILES_ACTIVE"]="prod"
        ["SERVER_PORT"]="8080"
        ["JAVA_TOOL_OPTIONS"]="-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
      )

      # 환경 변수 파일에 추가
      for key in "${!env_vars[@]}"; do
        echo "Setting $key..."
        echo "export ${key}=${env_vars[$key]}" >> "$ENV_FILE"
      done

      echo "Environment file created successfully"

      # 환경 변수 로드
      source "$ENV_FILE"

container_commands:
  01_verify_env:
    command: |
      #!/bin/bash
      echo "Verifying environment settings..."

      # Docker 상태 확인
      echo "Checking Docker status..."
      if ! docker info > /dev/null 2>&1; then
        echo "Docker is not running properly"
        exit 1
      fi

      # 환경 변수 검증
      echo "Verifying environment variables..."
      required_vars=(
        "REDIS_PASSWORD"
        "REDIS_HOST"
        "DB_HOST"
        "DB_USERNAME"
        "DB_PASSWORD"
        "JWT_SECRET_KEY"
        "SPRING_PROFILES_ACTIVE"
      )

      missing_vars=0
      for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
          echo "Warning: $var is not set"
          missing_vars=$((missing_vars + 1))
        else
          echo "$var is set"
        fi
      done

      # 경고만 출력하고 계속 진행
      if [ $missing_vars -gt 0 ]; then
        echo "Warning: $missing_vars environment variables are not set"
      fi

      # 로그 디렉토리 생성
      mkdir -p /var/log/eb-docker/containers/app
      chmod -R 777 /var/log/eb-docker/containers/app

      exit 0

  02_docker_cleanup:
    command: |
      #!/bin/bash
      set -e
      echo "Cleaning up Docker resources..."

      # 기존 컨테이너 정리
      if docker ps -a --format '{{.Names}}' | grep -q "spring-app"; then
        echo "Stopping existing spring-app container..."
        docker stop spring-app || true
        docker rm spring-app || true
      fi

      # 사용하지 않는 리소스 정리
      docker system prune -f

  02_docker_start:
    command: |
      #!/bin/bash
      set -e
      echo "Starting application container..."

      # 컨테이너 시작
      docker run -d \
        --name spring-app \
        --network host \
        -p 8080:8080 \
        -v /var/log/eb-docker/containers/app:/app/logs \
        --env-file /opt/elasticbeanstalk/deployment/env.list \
        --restart unless-stopped \
        "${DOCKER_USERNAME}/spring-app:latest"

      # 컨테이너 시작 확인
      echo "Waiting for container to start..."
      attempts=0
      max_attempts=30

      until [ $attempts -gt $max_attempts ]
      do
        if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
          echo "Application started successfully"
          exit 0
        fi

        attempts=$((attempts + 1))
        echo "Attempt $attempts/$max_attempts: Container not ready yet..."

        # 컨테이너 로그 확인
        docker logs spring-app --tail 50

        sleep 10
      done

      echo "Failed to start container"
      docker logs spring-app
      exit 1