name: Deploy to Production

on:
  push:
    branches: [ feature/ci_cd ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}
  EB_APP_NAME: library_management
  EB_ENV_NAME: Librarymanagement-env
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker 관련 단계 추가
      - name: Set up Docker Buildx    # Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub     # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}    # Docker Hub Access Token

      - name: Build and push Spring Boot image    # Spring Boot 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/spring-app:latest
          cache-to: type=inline

      # EC2 직접 배포 대신 Elastic Beanstalk 배포로 변경
      - name: Clean up old versions
        run: |
          # 최신 5개 버전만 유지
          versions=$(aws elasticbeanstalk describe-application-versions \
            --application-name ${{ env.EB_APP_NAME }} \
            --max-items 100 \
            --query 'ApplicationVersions[*].[VersionLabel,DateUpdated]' \
            --output text | sort -k2 -r | tail -n +6 | cut -f1)

          for version in $versions; do
            aws elasticbeanstalk delete-application-version \
              --application-name ${{ env.EB_APP_NAME }} \
              --version-label "$version" \
              --delete-source-bundle \
              --force-delete || true
          done

      - name: Update Elastic Beanstalk environment
        run: |
          # 환경 변수 업데이트
          aws elasticbeanstalk update-environment \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --option-settings "[
              {
                \"Namespace\": \"aws:elasticbeanstalk:application:environment\",
                \"OptionName\": \"DOCKER_USERNAME\",
                \"Value\": \"${{ secrets.DOCKER_USERNAME }}\"
              },
              {
                \"Namespace\": \"aws:elasticbeanstalk:application:environment\",
                \"OptionName\": \"DOCKER_PASSWORD\",
                \"Value\": \"${{ secrets.DOCKER_PASSWORD }}\"
              },
              {
                \"Namespace\": \"aws:elasticbeanstalk:application:environment\",
                \"OptionName\": \"IMAGE_TAG\",
                \"Value\": \"${{ github.sha }}\"
              }
            ]"
          
          # 환경 변수가 적용될 때까지 대기
          echo "Waiting for environment update..."
          sleep 30

      - name: Generate deployment package
        run: |
          # Docker config 생성
          mkdir -p ~/.docker
          echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64)'"}}}' > ~/.docker/config.json
          chmod 600 ~/.docker/config.json
          
          # Dockerrun.aws.json 환경 변수 치환
          sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKER_USERNAME }}|g" Dockerrun.aws.json
          sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" Dockerrun.aws.json
          
          # 배포 패키지 생성
          zip -r deploy.zip Dockerrun.aws.json .ebextensions/* .elasticbeanstalk/* ~/.docker/config.json
          
          # 배포 패키지 내용 확인
          unzip -l deploy.zip

      - name: Check environment status
        run: |
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            status=$(aws elasticbeanstalk describe-environments \
              --environment-names ${{ env.EB_ENV_NAME }} \
              --query 'Environments[0].Status' \
              --output text)
          
            if [ "$status" = "Ready" ]; then
              echo "Environment is ready for deployment"
              break
            fi
          
            echo "Environment status is $status. Waiting... (Attempt $attempt/$max_attempts)"
            sleep 30
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Environment did not become ready within the timeout period"
            exit 1
          fi

      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_deployment: true

      # 배포 후 헬스체크
      - name: Health check
        run: |
          echo "Waiting for deployment to complete..."
          # 배포 완료 대기 시간 증가
          sleep 60
          
          # Elastic Beanstalk 환경 URL 가져오기
          EB_ENV_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENV_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Checking health at: http://${EB_ENV_URL}/actuator/health"
          
          # 최대 5번 재시도
          for i in {1..5}
          do
            response=$(curl -s -o /dev/null -w "%{http_code}" "http://${EB_ENV_URL}/actuator/health" || echo "failed")
            if [ "$response" = "200" ]; then
              echo "Health check successful!"
              exit 0
            fi
            echo "Attempt $i: Health check failed with status: $response"
            sleep 30
          done
          
          echo "Health check failed after 5 attempts"
          
          # 로그 확인
          aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENV_NAME }} \
            --query 'Environments[0].Health' \
            --output text
          
          # 최근 이벤트 확인
          aws elasticbeanstalk describe-events \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --max-items 10
          
          exit 1