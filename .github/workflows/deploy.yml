name: Deploy to Production

on:
  push:
    branches: [ feature/ci_cd ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}
  EB_APP_NAME: library_management
  EB_ENV_NAME: Librarymanagement-env
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker 관련 단계 추가
      - name: Set up Docker Buildx    # Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub     # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}    # Docker Hub Access Token

      - name: Build and push Spring Boot image    # Spring Boot 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}

      - name: Update environment variables
        run: |
          sed -i -e '/aws:elasticbeanstalk:application:environment:/,+1d' .ebextensions/00-settings.config
          cat >> .ebextensions/00-settings.config << EOF

          # 환경 변수 설정
          option_settings:
            aws:elasticbeanstalk:application:environment:
              JAVA_OPTS: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
              SERVER_PORT: "8080"
              SPRING_PROFILES_ACTIVE: prod
              DB_HOST: ${{ secrets.DB_HOST }}
              DB_USERNAME: ${{ secrets.DB_USERNAME }}
              DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
              REDIS_SENTINEL_NODES: ${{ secrets.REDIS_SENTINEL_NODES }}
              REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
              JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
              OWNER_TOKEN: ${{ secrets.OWNER_TOKEN }}
              TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
              TOSS_CLIENT_KEY: ${{ secrets.TOSS_CLIENT_KEY }}
              TOSS_SUCCESS_URL: ${{ secrets.TOSS_SUCCESS_URL }}
              TOSS_FAIL_URL: ${{ secrets.TOSS_FAIL_URL }}
              TOSS_BASE_URL: ${{ secrets.TOSS_BASE_URL }}
          EOF

      # EC2 직접 배포 대신 Elastic Beanstalk 배포로 변경
      - name: Generate deployment package
        run: |
          # Docker config 생성
          mkdir -p ~/.docker
          echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64)'"}}}' > ~/.docker/config.json
          
          # Dockerrun.aws.json 환경 변수 치환
          sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKER_USERNAME }}|g" Dockerrun.aws.json
          sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" Dockerrun.aws.json
          
          # 배포 패키지 생성
          zip -r deploy.zip Dockerrun.aws.json .ebextensions/* .elasticbeanstalk/* ~/.docker/config.json

      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_deployment: true