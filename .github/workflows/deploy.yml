name: Deploy to Production

on:
  push:
    branches: [ feature/ci_cd ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: ${{ github.sha }}
  EB_APP_NAME: library_management
  EB_ENV_NAME: Librarymanagement-env
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker 관련 단계 추가
      - name: Set up Docker Buildx    # Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub     # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}    # Docker Hub Access Token

      - name: Build and push Spring Boot image    # Spring Boot 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ github.sha }}

      # EC2 직접 배포 대신 Elastic Beanstalk 배포로 변경
      - name: Clean up old versions
        run: |
          versions=$(aws elasticbeanstalk describe-application-versions \
            --application-name ${{ env.EB_APP_NAME }} \
            --query 'ApplicationVersions[*].VersionLabel' \
            --output text)

          for version in $versions; do
            aws elasticbeanstalk delete-application-version \
              --application-name ${{ env.EB_APP_NAME }} \
              --version-label "$version" \
              --delete-source-bundle \
              --force-delete || true
          done

      - name: Generate deployment package
        run: |
          # Docker config 생성
          mkdir -p ~/.docker
          echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64)'"}}}' > ~/.docker/config.json
          
          # 환경변수 설정 파일 생성
          cat > .ebextensions/03-environment.config << EOF
          option_settings:
            aws:elasticbeanstalk:application:environment:
              REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD }}"
              REDIS_SENTINEL_NODES: "${{ secrets.REDIS_SENTINEL_NODES }}"
              DB_HOST: "${{ secrets.DB_HOST }}"
              DB_USERNAME: "${{ secrets.DB_USERNAME }}"
              DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
              JWT_SECRET_KEY: "${{ secrets.JWT_SECRET_KEY }}"
              OWNER_TOKEN: "${{ secrets.OWNER_TOKEN }}"
              TOSS_SECRET_KEY: "${{ secrets.TOSS_SECRET_KEY }}"
              TOSS_CLIENT_KEY: "${{ secrets.TOSS_CLIENT_KEY }}"
              TOSS_SUCCESS_URL: "${{ secrets.TOSS_SUCCESS_URL }}"
              TOSS_FAIL_URL: "${{ secrets.TOSS_FAIL_URL }}"
              TOSS_BASE_URL: "${{ secrets.TOSS_BASE_URL }}"
              SPRING_PROFILES_ACTIVE: "prod"
              SERVER_PORT: "8080"
          
          files:
            "/opt/elasticbeanstalk/hooks/appdeploy/pre/03_set_env.sh":
              mode: "000755"
              owner: root
              group: root
              content: |
                #!/bin/bash
                # 환경 변수 검증
                echo "Verifying environment variables..."
          
                # 필수 환경 변수 목록
                declare -a required_vars=(
                  "REDIS_PASSWORD"
                  "REDIS_SENTINEL_NODES"
                  "DB_HOST"
                  "DB_USERNAME"
                  "DB_PASSWORD"
                  "JWT_SECRET_KEY"
                  "SPRING_PROFILES_ACTIVE"
                )
          
                # 환경 변수 파일 생성
                env_file="/opt/elasticbeanstalk/deployment/env"
          
                # 환경 변수 검증
                missing_vars=0
                for var in "\${required_vars[@]}"; do
                  value=\$(printenv \$var)
                  if [ -z "\$value" ]; then
                    echo "Error: \$var is not set"
                    missing_vars=\$((missing_vars + 1))
                  else
                    echo "\$var is set"
                    echo "export \$var='\$value'" >> \$env_file
                  fi
                done
                
                if [ \$missing_vars -gt 0 ]; then
                  echo "Missing \$missing_vars required environment variables"
                  exit 1
                fi
          
                # 권한 설정
                chmod 600 \$env_file
          
                # 환경변수 로드
                source "$env_file"
          
          container_commands:
            01_verify_env:
              command: |
                source /opt/elasticbeanstalk/deployment/env
                echo "Verifying environment settings..."
                
                # Docker 이미지 및 컨테이너 상태 확인
                echo "Checking Docker status..."
                docker info
                docker ps -a
                
                # Redis 연결 테스트
                echo "Testing Redis connection..."
                nc -zv \$(echo \$REDIS_SENTINEL_NODES | cut -d',' -f1 | cut -d':' -f1) \$(echo \$REDIS_SENTINEL_NODES | cut -d',' -f1 | cut -d':' -f2)
                
                # 데이터베이스 연결 테스트
                echo "Testing database connection..."
                nc -zv \$DB_HOST 3306
          EOF
          
          # Dockerrun.aws.json 환경 변수 치환
          sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKER_USERNAME }}|g" Dockerrun.aws.json
          sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" Dockerrun.aws.json
          
          # 배포 패키지 생성
          zip -r deploy.zip Dockerrun.aws.json .ebextensions/* .elasticbeanstalk/* ~/.docker/config.json

      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_deployment: true

      # 배포 후 헬스체크
      - name: Health check
        run: |
          echo "Waiting for deployment to complete..."
          # 배포 완료 대기 시간 증가
          sleep 60
          
          # Elastic Beanstalk 환경 URL 가져오기
          EB_ENV_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENV_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Checking health at: http://${EB_ENV_URL}/actuator/health"
          
          # 최대 5번 재시도
          for i in {1..5}
          do
            response=$(curl -s -o /dev/null -w "%{http_code}" "http://${EB_ENV_URL}/actuator/health" || echo "failed")
            if [ "$response" = "200" ]; then
              echo "Health check successful!"
              exit 0
            fi
            echo "Attempt $i: Health check failed with status: $response"
            sleep 30
          done
          
          echo "Health check failed after 5 attempts"
          
          # 로그 확인
          aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENV_NAME }} \
            --query 'Environments[0].Health' \
            --output text
          
          # 최근 이벤트 확인
          aws elasticbeanstalk describe-events \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --max-items 10
          
          exit 1